{
  "models" : [ {
    "type" : "record",
    "name" : "AlbumEntry",
    "namespace" : "com.linkedin.restli.example",
    "doc" : "An album for rest.li",
    "fields" : [ {
      "name" : "albumId",
      "type" : "long"
    }, {
      "name" : "photoId",
      "type" : "long"
    }, {
      "name" : "addTime",
      "type" : "long",
      "doc" : "When the photo was added to the album"
    } ]
  } ],
  "schema" : {
    "name" : "albumEntry",
    "namespace" : "com.linkedin.restli.example.photos",
    "path" : "/albumEntry",
    "schema" : "com.linkedin.restli.example.AlbumEntry",
    "doc" : "Many-many association between photos and albums.\n\n <pre>\n   new AlbumEntryBuilders().findBySearch()\n     .albumIdParam(5)\n     .photoIdParam(100)\n     .build();\n </pre>\n\ngenerated from: com.linkedin.restli.example.impl.AlbumEntryResource",
    "association" : {
      "identifier" : "albumEntryId",
      "assocKeys" : [ {
        "name" : "albumId",
        "type" : "long"
      }, {
        "name" : "photoId",
        "type" : "long"
      } ],
      "supports" : [ "batch_get", "delete", "get", "update" ],
      "methods" : [ {
        "method" : "get",
        "doc" : "Retrieve the photo's album entry"
      }, {
        "method" : "update",
        "doc" : "Add the specified photo to the specified album.\n If a matching pair of IDs already exists, this changes the add date."
      }, {
        "method" : "delete",
        "doc" : "Remove the specified photo from the specified album"
      }, {
        "method" : "batch_get"
      } ],
      "finders" : [ {
        "name" : "search",
        "doc" : "Find all entries matching the given album and photo IDs. <code>null</code> is treated\n as a wildcard.",
        "parameters" : [ {
          "name" : "albumId",
          "type" : "long",
          "optional" : true,
          "doc" : "provides the id to match for albums to match,  if not provided, it is treated as a wildcard"
        }, {
          "name" : "photoId",
          "type" : "long",
          "optional" : true,
          "doc" : "provides the id to match for photos to match,  if not provided, it is treated as a wildcard"
        } ]
      } ],
      "actions" : [ {
        "name" : "purge",
        "doc" : "Delete all entries in the db with matching album/photo IDs. If either albumId or photoId\n params are not supplied they are treated as a wildcard.",
        "parameters" : [ {
          "name" : "albumId",
          "type" : "long",
          "optional" : true
        }, {
          "name" : "photoId",
          "type" : "long",
          "optional" : true
        } ],
        "returns" : "int"
      } ],
      "entity" : {
        "path" : "/albumEntry/{albumEntryId}"
      }
    }
  }
}