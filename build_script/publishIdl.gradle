/*
   Copyright (c) 2012 LinkedIn Corp.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

final Configuration restliToolsConfig = project(':restli-tools').configurations.default
final String IDL_COMPAT_REQUIREMENT_NAME = 'rest.model.compatibility'

project.sourceSets.all { SourceSet sourceSet ->
  // test resources and .restspec.json files are not meant to be published
  if (sourceSet == project.sourceSets.test)
  {
    return
  }

  final String currIdlDirPath = "src${File.separatorChar}${sourceSet.name}GeneratedRest${File.separatorChar}idl"
  final FileTree currIdlFiles = project.fileTree(dir: currIdlDirPath, includes: ["**${File.separatorChar}*.restspec.json"])
  final String apiIdlDirRelativePath = "src${File.separatorChar}${sourceSet.name}${File.separatorChar}idl"
  final String dataSchemaRelativePath = "src${File.separatorChar}${sourceSet.name}${File.separatorChar}pegasus"
  final File apiIdlDir = apiProject.file(apiIdlDirRelativePath)

  final Task generateRestModelTask = project.tasks.findByName(sourceSet.name + 'GenerateRestModel')
  if (generateRestModelTask == null)
  {
    return
  }

  final Task publishIdlTask = project.task(sourceSet.name + 'PublishIdl',
                                           type: Copy,
                                           dependsOn: generateRestModelTask) {
    from currIdlFiles
    into apiIdlDir
  }

  if (!currIdlFiles.empty)
  {
    final String compatLevel = (project.hasProperty(IDL_COMPAT_REQUIREMENT_NAME) ? project.property(IDL_COMPAT_REQUIREMENT_NAME)
                                                                                 : 'equivalent')
    final Task checkIdlTask = project.task(sourceSet.name + 'CheckIdl',
                                           type: JavaExec,
                                           dependsOn: generateRestModelTask) {
      main = 'com.linkedin.restli.tools.idlcheck.RestLiResourceModelCompatibilityChecker'
      classpath restliToolsConfig + restliToolsConfig.allArtifacts.files
      systemProperties(['generator.resolver.path': apiProject.file(dataSchemaRelativePath).path])
      args '--compat'
      args compatLevel
    }
    currIdlFiles.each {
      final String apiIdlFilePath = "${apiIdlDir.path}${File.separatorChar}${it.name}"
      checkIdlTask.args apiIdlFilePath
      checkIdlTask.args it
    }

    project.gradle.taskGraph.afterTask { task, TaskState state ->
      if (task == checkIdlTask && state.failure != null)
      {
        println()
        println('You may add "-Prest.model.compatibility=backwards" to the build command to allow backwards compatible changes in idl.')
        println('You may use "-Prest.model.compatibility=ignore" to ignore idl compatibility errors.')
        println('Documentation: https://github.com/linkedin/rest.li/wiki/Gradle-build-integration#compatibility')
      }
    }

    publishIdlTask.dependsOn(checkIdlTask)
  }

  project.tasks[sourceSet.getTaskName('', 'jar')].dependsOn(publishIdlTask)
}
